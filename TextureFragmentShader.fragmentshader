#version 330 core

// Inputs interpolated from the vertex shader.
in vec2 UV;                              // Interpolated texture coordinates.
in vec3 Position_worldspace;             // Position of the fragment in world space.
in vec3 Normal_cameraspace;              // Normal vector of the fragment in camera space.
in vec3 EyeDirection_cameraspace;        // Direction vector from the fragment to the camera in camera space.
in vec3 LightDirections_cameraspace[5];  // Array of light direction vectors in camera space.

// Output color of the fragment (to be passed to the framebuffer).
out vec3 color;

// Uniform values that remain constant for the entire draw call.
uniform sampler2D myTextureSampler;      // Sampler for the diffuse texture.
uniform mat4 MV;                         // Model-View matrix.
uniform vec3 LightPositions_worldspace[5]; // Array of light positions in world space.

// Light emission properties.
vec3 LightColor = vec3(1.0, 0.75, 0.135); // The color of the light (e.g., warm yellow).
float LightPower = 200.0f;                // Intensity of the light source.

// Material properties for the surface.
vec3 MaterialDiffuseColor = texture(myTextureSampler, UV).rgb;         // Surface diffuse color sampled from the texture.
vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor; // Ambient color contribution based on the diffuse color.
vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);                       // Specular highlight color for the surface.

/**
 * Function to calculate the lighting contribution from a single light source.
 * 
 * @param lightDir - Direction vector from the fragment to the light source.
 * @param normal - Normal vector of the fragment in camera space.
 * @param eyeDir - Direction vector from the fragment to the camera in camera space.
 * @param lightPos - The world position of the light source (needed for distance attenuation).
 * @return vec3 - Lighting contribution as a color vector.
 */
vec3 calculateLighting(vec3 lightDir, vec3 normal, vec3 eyeDir, vec3 lightPos) {
    // Normalize the normal vector to ensure consistent lighting calculations.
    vec3 n = normalize(normal);

    // Normalize the light direction vector.
    vec3 l = normalize(lightDir);

    // Calculate the cosine of the angle between the normal and light direction.
    // This determines the diffuse lighting intensity.
    float cosTheta = clamp(dot(n, l), 0.0, 1.0);

    // Normalize the eye direction vector.
    vec3 E = normalize(eyeDir);

    // Compute the reflection vector of the light direction around the normal.
    vec3 R = reflect(-l, n);

    // Calculate the cosine of the angle between the eye vector and the reflection vector.
    // This determines the specular lighting intensity.
    float cosAlpha = clamp(dot(E, R), 0.0, 1.0);

    // Calculate the distance to the light source for attenuation
    float distance = length(lightPos - Position_worldspace);

    // Return the sum of the diffuse and specular contributions, scaled by the light's power and color, and attenuated by distance
    return (LightColor * LightPower * cosTheta) + (MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5.0)) / (distance * distance);
}

void main() {
    // Start with the ambient color contribution.
    vec3 finalColor = MaterialAmbientColor;

    // Accumulate contributions from all light sources.
    for (int i = 0; i < 5; i++) {
        // Direction vector from the fragment to the current light source in camera space.
        vec3 lightDirection = LightDirections_cameraspace[i];

        // Add the lighting contribution from the current light source
        finalColor += calculateLighting(lightDirection, Normal_cameraspace, EyeDirection_cameraspace, LightPositions_worldspace[i]);
    }

    // Set the output fragment color to the final computed value.
    color = finalColor * MaterialDiffuseColor;  // Adding texture color effect
}
